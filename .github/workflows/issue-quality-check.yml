name: Issue Quality Check

on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited]

permissions:
  issues: write
  pull-requests: write
  models: read

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check quality with AI
        uses: actions/ai-inference@v1
        id: ai
        with:
          prompt: |
            Analyze this GitHub ${{ github.event_name == 'issues' && 'issue' || 'pull request' }} for quality and completeness:
            
            Title: ${{ github.event.issue.title || github.event.pull_request.title }}
            Body: ${{ github.event.issue.body || github.event.pull_request.body }}
            
            Determine if this is:
            1. Complete and ready for review
            2. Missing required information
            3. Potential spam or low quality
            4. Security related
            5. Bug report
            6. Feature request
            
            Respond with a JSON object containing:
            {
              "status": "ready|needs-info|spam|invalid",
              "type": "bug|feature|security|question|documentation|none",
              "missing_fields": ["field1", "field2"],
              "recommendation": "brief explanation"
            }
          model: openai/gpt-4o-mini
          temperature: 0.1

      - name: Process AI response
        uses: actions/github-script@v7
        with:
          script: |
            const response = JSON.parse('${{ steps.ai.outputs.response }}');
            const number = ${{ github.event.issue.number || github.event.pull_request.number }};
            
            // Add status label
            if (response.status !== 'ready') {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: number,
                labels: [`status/${response.status}`]
              });
            }
            
            // Add type label if identified
            if (response.type !== 'none') {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: number,
                labels: [`kind/${response.type}`]
              });
            }
            
            // Comment if needs more information
            if (response.status === 'needs-info' && response.missing_fields.length > 0) {
              const comment = `Thank you for your submission! To help us better address this, could you please provide the following additional information:\n\n${response.missing_fields.map(f => `- ${f}`).join('\n')}\n\n${response.recommendation}`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: number,
                body: comment
              });
            }
