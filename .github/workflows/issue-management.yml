name: "Issue Management"

on:
  issues:
    types: [opened, reopened, edited, labeled]
  pull_request:
    types: [opened, reopened, edited]

permissions:
  issues: write
  pull-requests: write
  models: read
  contents: read

jobs:
  summarize-to-slack:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Summarize issue
        id: summarize-issue
        uses: actions/ai-inference@v1
        with:
          model: gpt-4o-mini
          prompt: |
            Summarize this GitHub issue:
            
            Title: ${{ github.event.issue.title }}
            Body: ${{ github.event.issue.body }}
            
            Provide a detailed technical assessment of:
            1. Issue complexity and scope
            2. Potential impact and risks
            3. Implementation suggestions
            4. Required expertise level
            
            Format your response in markdown with clear sections.
      - name: Determine Priority Color
        id: priority-color
        run: |
          if [[ "${{ github.event.issue.labels.*.name }}" == *"priority/critical"* ]]; then
            echo "color=danger" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.issue.labels.*.name }}" == *"priority/high"* ]]; then
            echo "color=warning" >> $GITHUB_OUTPUT
          else
            echo "color=good" >> $GITHUB_OUTPUT
          fi

      - name: Format Labels
        id: format-labels
        run: |
          labels="${{ github.event.issue.labels.*.name }}"
          if [ -n "$labels" ] && [ "$labels" != "null" ]; then
            # Convert array format to comma-separated string
            formatted_labels=$(echo "$labels" | tr -d '[]' | tr ',' '\n' | tr -d ' ' | grep -v '^$' | tr '\n' ',' | sed 's/,$//')
            echo "labels=$formatted_labels" >> $GITHUB_OUTPUT
          else
            echo "labels=None" >> $GITHUB_OUTPUT
          fi

      - name: Create Slack Message
        id: slack-message
        run: |
          # Create a simple message without complex JSON
          echo "🚨 New Issue Created" > message.txt
          echo "" >> message.txt
          echo "📋 **Issue #${{ github.event.issue.number }}: ${{ github.event.issue.title }}**" >> message.txt
          echo "🔗 Link: ${{ github.event.issue.html_url }}" >> message.txt
          echo "" >> message.txt
          echo "📁 **Repository:** ${{ github.repository }}" >> message.txt
          echo "👤 **Author:** ${{ github.event.issue.user.login }}" >> message.txt
          echo "🏷️ **Labels:** ${{ steps.format-labels.outputs.labels }}" >> message.txt
          echo "" >> message.txt
          echo "🤖 **AI Summary:**" >> message.txt
          echo "${{ steps.summarize-issue.outputs.response }}" >> message.txt
          
          # Read the message content
          message=$(cat message.txt)
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$message" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Push to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "${{ secrets.SLACK_CHANNEL || '#github-issues' }}",
              "text": "${{ steps.slack-message.outputs.message }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}