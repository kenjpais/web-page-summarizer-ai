name: Continuous AI Resolver

on:
  schedule:
    - cron: '0 0 * * 0'  # Runs every Sunday at midnight UTC
  workflow_dispatch:

permissions:
  issues: write
  pull-requests: write
  models: read

jobs:
  resolve:
    runs-on: ubuntu-latest
    steps:
      - name: Check stale issues
        uses: actions/ai-inference@v1
        id: ai
        with:
          prompt: |
            Review this issue for staleness and relevance:
            
            Title: ${{ github.event.issue.title }}
            Body: ${{ github.event.issue.body }}
            Last Updated: ${{ github.event.issue.updated_at }}
            
            Determine if this issue is:
            1. Still relevant and active
            2. Potentially resolved in recent updates
            3. No longer relevant
            4. Needs more information
            
            Respond with a JSON object containing:
            {
              "status": "active|resolved|stale|needs-info",
              "recommendation": "brief explanation of why",
              "action": "keep-open|close|comment"
            }
          model: openai/gpt-4o-mini
          temperature: 0.1

      - name: Process stale issues
        uses: actions/github-script@v7
        with:
          script: |
            const response = JSON.parse('${{ steps.ai.outputs.response }}');
            
            if (response.action === 'close') {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                state: 'closed',
                state_reason: 'not_planned'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `This issue has been automatically closed: ${response.recommendation}`
              });
            }
            
            if (response.action === 'comment') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: response.recommendation
              });
            }
